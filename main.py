import time   
import psutil
import threading
import hashlib
from Crypto.Cipher import AES


def generate_randomness(size):
    global final_stream
    def make_seed():
        preset_apollyon = 97112111108108121111110 
        preset_1 = 9811198 
        preset_2 = 97110100 
        preset_3 = 9710810599101 
        preset_4 = 115971161219710910111897 
        preset_5 = 1069712197116101 

        global seed
        seed = 0

        def seeder():
            global seed
            for i in range(64):
                epoch_time = int(time.time_ns())
                if epoch_time%2 == 0:
                    seed = seed + (epoch_time*preset_apollyon) + (psutil.virtual_memory()[3]*preset_5)
                elif epoch_time%3 == 0:
                    seed = seed + (epoch_time*preset_1) + (psutil.virtual_memory()[3]*preset_4)
                elif epoch_time%5 == 0:
                    seed = seed + (epoch_time*preset_2) + (psutil.virtual_memory()[3]*preset_3)
                elif epoch_time%7 == 0:
                    seed = seed + (epoch_time*preset_3) +(psutil.virtual_memory()[3]*preset_2)
                elif epoch_time%11 == 0:
                    seed = seed + (epoch_time*preset_4) + (psutil.virtual_memory()[3]*preset_1)
                elif epoch_time%13 == 0:
                    seed = seed + (epoch_time*preset_5) + (psutil.virtual_memory()[3]*preset_apollyon)
                else:
                    seed = seed + epoch_time
            
        for i in range(4):
            threading.Thread(target=seeder(),)

        return hashlib.sha256(str(seed).encode()).digest()
    
    
    presets = [
        79328397110106972104497116105114103116105114119103111411161083210751171001021151083279741161161149710311697101101151101111111101041151181041001109711411611497117100110101100121,

        79110321119811510111411810511010332116104101201101163280101101161191171141001031161161141171041083275110117112114110107105114324810510011010311412197101104111104110100449711111097104101321169711410811111910511010311911111410011546,

        8210111511210110032105104971143326610411110032104115103117119321114100104105114321116115116327971111011011532119117105116111116324512171110100321171121129710510432101101114971111171119107114115332116104115321001001141171129710046,

        66101104111108321051141051181141173297110121109321131151193211101192111117117329711101141021151171193244105110111321171103289117114101110321161019710810511010310910510310411612198111119115116321101101101011051171161119711211411111910111511532116110101110109321141101011110997110321103266104101105101321019711710611711046,

        841041011011013210197101971081111511051003210410511811111532104101114111101011032108105107101681051181051161191211171210032671041011071051101141101032116104101321031011081081101161051103211010311510611610311011510210032801171181051063211011110111111032115104971051021221281481101081161051003210711011011511611611510032111611511632111511410111010432,

        731101161051051173210411710511432116104101121321971081111153210411221118101104101321991111171011071111171021211011211032116104101321031011081081101161051103211011911711432097971061101171211032116104101321191111114010611111710011411032971081051003210411011010111114432099971171161011003210411611510011610497971081051003210971111011003211103114101971191111171111043211510911610532,

        793298101115116321113211166510511511532104101971141321161111101001003210416911511499991083211511532111411011711811132115111110321111171003211911051003211111051161971041051003211912110532321191041111161073211511211210511610432105101971051323210411610111711511410432841041051153210731101101191141101171103210211111321211117111046,

        841041011011013210197101112115111110971081051051161051153211191107111117114115101108663211631041011011191973211111032751091171171051153210751101141101171032751141051321651191971321211011721161041091101321841051071971081171101032861051171141101103210197111321981051221111011171111321051221081081051161011101101046,

        651081153211610411710132971101109711032111161041051321041051141111053211911011411511511711511611511032119104111971141011051321121011171121161151321041211101101321081051211051103211611051321001211611011191011051153210114197101321151051003246,

        841101161211151061321171051151121103210971111611911151113321321161051161211111032116104101121161041111103210111711611011171031101161191041161101101171141101161051103211021061161141103210971171161041161171171011,



        841141121011151141161031161211011013210971141011103210971011811010116104105114101321171101161181141191103211111021171161103210971161021001161031161103211032116104101103210117105110101110103210101161011161141121151151121161021101161011151161103210111011010132061161011001101011010,

        841161161021111032116104101114111971011011010110111001011201151041161151161171211431161011171121051141021161101103210121171141161101103210971161101011191011111032116104101121161101181051101161121161011001161161021031161111021031011151101211103210491161101121021131211061151141101161141141021171101191032116104101114105116105111011010,

        841121151103210121171141161151103211321171151103210101141161061171161181051171141103210121171141031163210101161161141021161161101041021161171121021011101161101011103210191151181141161171031161141161111101171011211032116104101103210111031011191141141101161171101103210421161161041011171161021161101141161101011110132021011011011810103210141141101161171032116104101121161011161011121021121101021041161101011103210491101171161031021161141161141103210111110,

        841011141011151103210971141061121051121161103211071121081161101321161101161151161101103210119111421161103210171161011141103210110101191141031211161101031171211171011161151161021021111021011211141111021121161111001161101121151161171011161021041061011161101103211111161121021021161101161051161171011171021021011171161021161011001021061161021041061121171161101,

        721141161011151103210991101161121051171161103210971181121161121161101161161141191103211171011141011161051171161101171211103211171011103210971171161103210111181031151211161021031171101151031161161021121161121011161021011171031161161011101161181031161103211171161021021161161103210971161031161101161171031161141161103210121171021021161161011151161011171161101,


    ]

    initial_string = "hello world"
    nonce = 64
    current_seed = make_seed()
    for x in range(size):
        cipher = AES.new(current_seed, AES.MODE_OCB)
        string_to_encrypt = initial_string+str(nonce)+str(presets[nonce%16])
        string_to_encrypt = hashlib.sha256(string_to_encrypt.encode()).digest()
        encrypted = cipher.encrypt(string_to_encrypt)
        final_stream= final_stream + encrypted
        current_seed = make_seed()


def userland_interface(size):
    global final_stream
    final_stream = b""
    for x in range(64,0,-1):
        if size%x == 0:
            for i in range(x):
                threading.Thread(target=generate_randomness(size//x),)
            break
    return final_stream
        
# making 3200 bytes
print(userland_interface(100))



